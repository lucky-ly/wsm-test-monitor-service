@using System.Configuration
@{
    ViewBag.Title = "Server Monitor";
}

@section scripts {
<script type="text/javascript" src="~/Scripts/service-client.js"></script>
<script>
    var App = function(serviceUrl) {
        var self = this;
        this.serviceClient = new MonitorServiceClient(serviceUrl);
        this.run = function() {
            $('#disconnect-alert').addClass('hidden');

            self.serviceClient.openConnection(self.updateView, self.disconnectHandler);
        };

        this.disconnectHandler = function(event) {
            $('#disconnect-alert').removeClass('hidden');
        }

        this.updateView = function(data) {
            const $table = $('#table');
            const $overview = $('#overview');

            $table.html('');
            $overview.html('');

            let usedCpuRecalculated = 0;
            let usedRamRecalculated = 0;
            let threadsCount = 0;

            const usedRam = data.RamUsageBytes;
            const usedCpu = data.CpuUsage * 100;
            const processCount = data.Processes.length;
            const updateTime = (new Date(data.UpdateTime)).toLocaleString();

            for (let key in data.Processes) {
                const process = data.Processes[key];

                usedCpuRecalculated = usedCpuRecalculated + process.CpuUsage;
                usedRamRecalculated = usedCpuRecalculated + process.RamUsageBytes;
                threadsCount = threadsCount + process.ThreadsCount;

                const ramMb = process.RamUsageBytes / 1024 / 1024;
                const startTime = (new Date(process.StartTime)).toLocaleString();

                const $element = $('<tr></tr>');
                $element.append(`<td>${process.ProcessId}</td>`);
                $element.append(`<td>${process.Name}</td>`);
                $element.append(`<td>${Math.round(process.CpuUsage * 100)} %</td>`);
                $element.append(`<td title="${process.RamUsageBytes} bytes">${ramMb.toFixed(2)} Mb</td>`);
                $element.append(`<td>${process.ThreadsCount}</td>`);
                $element.append(`<td>${startTime.toString()}</td>`);

                $table.append($element);
            }

            $overview.append(`<p><b>Update time: </b>${updateTime}</p>`);
            $overview.append(`<p><b>Cpu: </b>${Math.round(usedCpu).toFixed(2)}% / ${Math.round(usedCpuRecalculated * 100).toFixed(2)}%</p>`);
            $overview.append(`<p><b>Ram: </b>${(usedRam / 1024 / 1024).toFixed(2)} Gb / ${(usedRamRecalculated / 1024 / 1024).toFixed(2)} Gb</p>`);
            $overview.append(`<p><b>Processes: </b>${processCount}</p>`);
            $overview.append(`<p><b>Threads: </b>${threadsCount}</p>`);
        }
    };

    $(function() {
        const url = '@ConfigurationManager.AppSettings.Get("WsUrl")';
        
        const app = new App(url);
        $('#reconnect-link').click(function(e) {
            app.run();
            e.preventDefault();
        });

        app.run();
    });
</script>
}

<div class="row">
    <div class="col-md-12">
        <h2>Server monitor</h2>
        
        <div class="alert alert-danger hidden" id="disconnect-alert">Connection lost. Reload page to <a id="reconnect-link" href="/">reconnect</a>.</div>
        
        <div class="panel" id="overview">
            <p>Connecting to service...</p>
        </div>

        <table class="table table-striped">
            <thead>
            <tr>
                <th>pid</th>
                <th>Name</th>
                <th>Cpu Usage</th>
                <th>Ram Usage (Mb)</th>
                <th>Threads count</th>
                <th>Start time</th>
            </tr>
            </thead>
            <tbody id="table">

            </tbody>
        </table>
    </div>
</div>